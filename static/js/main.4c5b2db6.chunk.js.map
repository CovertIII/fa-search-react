{"version":3,"sources":["Input.js","Results.js","Container.js","serviceWorker.js","index.js"],"names":["Input","loading","onChange","className","type","placeholder","aria-label","aria-describedby","id","Results","data","errorMessage","noResults","map","name","uri","key","src","alt","href","Container","useState","state","setState","subject","setSubject","useEffect","observable","pipe","s","trim","distinctUntilChanged","filter","length","debounceTime","switchMap","term","merge","of","fetch","then","response","ok","json","title","catchError","e","subscribe","newState","Object","assign","unsubscribe","sub","BehaviorSubject","next","target","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sTAgBeA,MAdf,YAAqC,IAArBC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,SACvB,OACE,yBAAKC,UAAU,yBACb,2BAAOC,KAAK,OAAOD,UAAU,eAAeE,YAAY,YAAYC,aAAW,eAAeC,mBAAiB,eAAeL,SAAUA,IACxI,yBAAKC,UAAU,sBACXF,EACA,0BAAME,UAAU,mBAAmBK,GAAG,gBAAtC,cACA,0BAAML,UAAU,mBAAmBK,GAAG,gBAAtC,YCUKC,MAjBf,YAAqE,IAAD,IAAlDC,YAAkD,MAA3C,GAA2C,MAAvCC,oBAAuC,MAAxB,GAAwB,MAApBC,iBAAoB,SAClE,OACE,6BACID,GAAgB,iCAAOA,EAAP,KAChBC,GAAa,6DACf,yBAAKT,UAAU,QACXO,EAAKG,KAAI,gBAAEC,EAAF,EAAEA,KAAMC,EAAR,EAAQA,IAAR,OACX,yBAAKC,IAAKD,EAAKZ,UAAU,mBACvB,yBAAKc,IAAK,2CAA6CF,EAAKZ,UAAU,eAAee,IAAKJ,IAC1F,uBAAGX,UAAU,aAAY,uBAAGgB,KAAM,iCAAmCL,GAAOA,WC+DvEM,MApEf,WAAsB,IAAD,EACOC,mBAAS,CACjCX,KAAM,GACNT,SAAS,EACTU,aAAc,GACdC,WAAW,IALM,mBACZU,EADY,KACLC,EADK,OAQWF,mBAAS,MARpB,mBAQZG,EARY,KAQHC,EARG,KA4DnB,OAlDAC,qBAAU,WACR,GAAe,OAAZF,EAGI,CACL,IAAMG,EAAaH,EAAQI,KACzBf,aAAI,SAAAgB,GAAC,OAAIA,EAAEC,UACXC,cACAC,aAAO,SAAAH,GAAC,OAAIA,EAAEI,QAAU,KACxBC,YAAa,KACbC,aAAU,SAAAC,GAAI,OACZC,YACEC,YAAG,CAACrC,SAAS,EAAMU,aAAc,GAAIC,WAAW,IAChD2B,MAAM,kEAAoEH,GAAMI,MAAK,SAAAC,GACnF,OAAGA,EAASC,GACHD,EACJE,OACAH,MAAK,SAAA9B,GAAI,MAAK,CAACA,OAAMT,SAAS,EAAOW,UAA2B,IAAhBF,EAAKuB,WAEnDQ,EACJE,OACAH,MAAK,SAAA9B,GAAI,MAAK,CACbA,KAAM,GACNT,SAAS,EACTU,aAAcD,EAAKkC,iBAK7BC,aAAW,SAAAC,GAAC,MAAK,CACf7C,SAAS,EACTU,aAAc,oCAEhBoC,WAAW,SAAAC,GACXzB,GAAS,SAAAM,GAAC,OAAIoB,OAAOC,OAAO,GAAIrB,EAAGmB,SAGrC,OAAO,WACLrB,EAAWwB,cACX3B,EAAQ2B,eArCV,IAAMC,EAAM,IAAIC,IAAgB,IAChC5B,EAAW2B,KAuCZ,CAAC5B,IASF,yBAAKrB,UAAU,aACb,kBAAC,EAAD,CAAOF,QAASqB,EAAMrB,QAASC,SARlB,SAAA4C,GACf,GAAGtB,EACD,OAAOA,EAAQ8B,KAAKR,EAAES,OAAOC,UAO7B,kBAAC,EAAD,CAAS9C,KAAMY,EAAMZ,KAAMC,aAAcW,EAAMX,aAAcC,UAAWU,EAAMV,cCzDhE6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4c5b2db6.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Input({loading, onChange}) {\n  return (\n    <div className=\"input-group mb-3 mt-3\">\n      <input type=\"text\" className=\"form-control\" placeholder=\"Search...\" aria-label=\"Search icons\" aria-describedby=\"basic-addon2\" onChange={onChange} />\n      <div className=\"input-group-append\">\n        { loading ?\n          <span className=\"input-group-text\" id=\"basic-addon2\">Loading...</span> :\n          <span className=\"input-group-text\" id=\"basic-addon2\">Ready</span>\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default Input;\n","import React from 'react';\n\nfunction Results({data = [], errorMessage = '', noResults = false}) {\n  return (\n    <div>\n      { errorMessage && <div> {errorMessage} </div> }\n      { noResults && <div> No results for this search </div> }\n      <div className=\"grid\">\n        { data.map(({name, uri}) =>\n        <div key={uri} className=\"card grid-child\">\n          <img src={'https://fa-search-backend.herokuapp.com/' + uri} className=\"card-img-top\" alt={name} />\n          <p className=\"card-text\"><a href={'https://fontawesome.com/icons/' + name}>{name}</a></p>\n        </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Results;\n","import React, { useState, useEffect } from 'react';\nimport { BehaviorSubject, of, merge } from 'rxjs';\nimport { debounceTime, map, distinctUntilChanged, filter, switchMap, catchError } from 'rxjs/operators';\nimport Input from './Input.js';\nimport Results from './Results.js';\n\nfunction Container() {\n  const [state, setState] = useState({\n    data: [],\n    loading: false,\n    errorMessage: '',\n    noResults: false\n  });\n\n  const [subject, setSubject] = useState(null);\n\n  useEffect(() => {\n    if(subject === null) {\n      const sub = new BehaviorSubject('');\n      setSubject(sub);\n    } else {\n      const observable = subject.pipe(\n        map(s => s.trim()),\n        distinctUntilChanged(),\n        filter(s => s.length >= 2),\n        debounceTime(200),\n        switchMap(term =>\n          merge(\n            of({loading: true, errorMessage: '', noResults: false}),\n            fetch('https://fa-search-backend.herokuapp.com/search?delay=true&term=' + term).then(response => {\n              if(response.ok) {\n                return response\n                  .json()\n                  .then(data => ({data, loading: false, noResults: data.length === 0}));\n              }\n              return response\n                .json()\n                .then(data => ({\n                  data: [],\n                  loading: false,\n                  errorMessage: data.title\n                }));\n            })\n          )\n        ),\n        catchError(e => ({\n          loading: false,\n          errorMessage: 'An application error occured'\n        }))\n      ).subscribe( newState => {\n        setState(s => Object.assign({}, s, newState));\n      });\n\n      return () => {\n        observable.unsubscribe()\n        subject.unsubscribe();\n      }\n    }\n  }, [subject]);\n\n  const onChange = e => {\n    if(subject) {\n      return subject.next(e.target.value);\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <Input loading={state.loading} onChange={onChange} />\n      <Results data={state.data} errorMessage={state.errorMessage} noResults={state.noResults} />\n    </div>\n  );\n}\n\nexport default Container;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Container from './Container.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Container />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}